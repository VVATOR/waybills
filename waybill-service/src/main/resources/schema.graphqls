schema {
    # The query root of Waybill`s GraphQL interface.
    query: Query

}


# The Root Mutation for the application
#type Mutation {
#    writePost(title: String!, text: String!, category: String) : Post!
#}

# The Root QueryResolver for the application
type Query {
    allWaybills: [Waybill]
    allCategoryMachines: [CategoryMachine]
    allDrivers: [Driver]
    allMachines: [Machine]
    allDbFiles: [DbFile]
    allUsers: [User]

    countWaybills: Int!


    #allWaybills{
    #id
    #}
    #allCategoryMachines{
    #id
    #}
    #allDrivers{
    #id
    #}
    #allMachines{
    #id
    #}
    #allDbFiles{
    #id
    #}

    # recentPosts(count: Int, offset: Int): [Waybill]!
}

type User {
    id: Int
    login: String
    password: String
    role: String
}

type DbFile {
    id: Int
    fileName: String
    fileType: String
    #data: String
}

#scalar Date

type Waybill {
    id: ID
    status: Status
    number: String
    #  date: Date
    #drivers: [Driver]
    #machine: Machine
    #task: Task
    #workDriverAndMachine: WorkDriverAndMachine
    #result: Result
    #tsm: TSM

    # name: String
    # pageCount: Int
    # author: Author
}

#scalar Date

type TSM {
    id: Int
}

type Result {
    id: Int
}

type WorkDriverAndMachine {
    id: Int
}

type Task {
    id: Int
    customer:String
    #  dateArriving:Date
    #  dateDeparture:Date
    departurePoint:String
    destinationPoint:String
    cargo:String
}

type Machine {
    id: Int
    name: String
    # categoryMachine: CategoryMachine
    registrationNumber: String
    garageNumber: String
}

type CategoryMachine {
    id: Int
    name: String
}

enum Status {
    ACTIVE
    CLOSED
    BROKEN
}

type Driver {
    id: Int
    name: String
    personalNumber: String
}